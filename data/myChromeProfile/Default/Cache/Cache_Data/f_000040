var fnScheduleCategoryList,
	fnGetAlarmLabel,
	checkAlarmList, checkFacilityRestrict,
	scheduleRepeatString,
	fnGetScheduleRegInfo,
	fnCheckMailAddress,
	optimizeScheduleData,
	fnRevistionTime,
	dateToMoment,
	fnAttendParticipant,
	getParticipantUI;

var setProfileFavorite,
	displyFavorite,
	addUserFavorite,
	deleteFavorite;

var viewSchedule,
	goPlanner,
	goSchedule,
	deleteSchedule;
	

var eventStyle = {
	event_class_type1 : { border: "#d5d5d5", background_color: "#eeeeee", color: "#444" },
	event_class_type2 : { border: "#c2c2c2", background_color: "#dedede", color: "#444" },
	event_class_type3 : { border: "#ababab", background_color: "#c9c9c9", color: "#444" },
	event_class_type4 : { border: "#9a9a9a", background_color: "#a9a9a9", color: "#444" },
	event_class_type5 : { border: "#a1a1bc", background_color: "#b7b7f1", color: "#2f2f7b" },
	event_class_type6 : { border: "#c4c4d8", background_color: "#cecef1", color: "#444" },
	event_class_type7 : { border: "#7575a8", background_color: "#9090e1", color: "#fff" },
	event_class_type8 : { border: "#474889", background_color: "#5354be", color: "#fff" },
	event_class_type9 : { border: "#d6e1bf", background_color: "#e4f1ce", color: "#444" },
	event_class_type10 : { border: "#a3c45c", background_color: "#b7db7a", color: "#444" },
	event_class_type11 : { border: "#e4de99", background_color: "#f6efb6", color: "#444" },
	event_class_type12 : { border: "#ebcd65", background_color: "#f4e66c", color: "#444" },
	event_class_type13 : { border: "#eda53e", background_color: "#f6b326", color: "#444" },
	event_class_type14 : { border: "#cbe3e4", background_color: "#d0f1ec", color: "#444" },
	event_class_type15 : { border: "#b1d4d6", background_color: "#b8eae2", color: "#444" },
	event_class_type16 : { border: "#73adb0", background_color: "#7dd6c7", color: "#444" },
	event_class_type17 : { border: "#cdcdcd", background_color: "#ffffff", color: "#444" },
	event_class_type18 : { border: "#e99797", background_color: "#f1b7b7", color: "#444" },
	event_class_type19 : { border: "#901d2c", background_color: "#a02031", color: "#fff" },
	event_class_type20 : { border: "#e94d52", background_color: "#f35055", color: "#fff" },
	event_class_type21 : { border: "#ab4a2e", background_color: "#be5233", color: "#fff" },
	event_class_type22 : { border: "#ee6e2f", background_color: "#f87331", color: "#fff" },
	event_class_type23 : { border: "#8f6a5f", background_color: "#9f766a", color: "#fff" },
	event_class_type24 : { border: "#bc8b1f", background_color: "#d19b22", color: "#fff" },
	event_class_type25 : { border: "#006530", background_color: "#007135", color: "#fff" },
	event_class_type26 : { border: "#018d06", background_color: "#35a23a", color: "#fff" },
	event_class_type27 : { border: "#12408e", background_color: "#14479e", color: "#fff" },
	event_class_type28 : { border: "#2769d4", background_color: "#4984d9", color: "#fff" },
	event_class_type29 : { border: "#4f2ba1", background_color: "#5830b3", color: "#fff" },
	event_class_type30 : { border: "#6342aa", background_color: "#744dc8", color: "#fff" }
};

function User(userId, userName, jobTitleName, teamName, profileImg) {
	this.id = userId;
	this.name = userName;
	this.jobTitleName = jobTitleName;
	this.teamName = teamName;
	this.profileImg = profileImg;
	this.type = "user";
}

function Participant(scheduleId, userId, userName, jobTitleName, teamName, type, seq, tenantId, tenantName, vId, mobile) {
	this.scheduleId = scheduleId;
	this.targetUserId = userId;
	this.targetUserName = userName;
	this.targetUserJobTitleName = jobTitleName;
	this.targetUserTeamName = teamName;
	this.targetType = type;
	this.sortOrder = seq;
	this.targetTenantId = tenantId;
	this.targetTenantName = tenantName;
	this.vId = vId;
	this.targetUserMobile = mobile;
};

function Alarm(type, time) {
	this.alarmType = type;
	this.alarmTime = time;
};

function Repeat(repeatType, repeatPeriod, repeatPeriodOption, startDate, endDate, sdStartDate, sdEndDate) {
	this.repeatType	= repeatType;
	this.repeatPeriod = repeatPeriod;
	this.repeatPeriodOption = repeatPeriodOption;
	this.startDate = startDate;
	this.endDate = endDate;
	this.sdStartDate = sdStartDate;
	this.sdEndDate = sdEndDate;
};

/*function Facility(facilityId, facilityName) {
	this.facilityId = facilityId,
	this.facilityName = facilityName;
};*/
//function File() {};

var dateFormats = {day:spro.config.format.date, time:spro.config.format.dateTime};

var tmplParticipantUser = '<span class="user1 sender">' +
			'<span class="per26" style="padding:1px;">' +
				'<img class="img-circle" '+ 
					'{{if profileImg}}src="'+spro.getWebAppPath("po")+'${profileImg}"'+
					'{{else}}src="/images/placeholders/avatars/avatar_26x26.png" {{/if}}'+
				'alt="" onerror="this.src=/images/placeholders/avatars/avatar_26x26.png">' +
			'</span>' +
			'<a href="#${targetUserId}" title="${targetUserName} ${targetUserJobTitleName} ${targetUserTeamName}">' +
				'${targetUserName} ${targetUserJobTitleName}' +
			'</a>' +
			'{{if viewDate}}<small class="check">${viewDateStr}</small>{{/if}}' +
		'</span>',
	tmplParticipantOtherTenantUser = '<span class="user1 sender">' +
			'<span class="per26" style="padding:1px;">' +
			'<img class="img-circle" '+ 
				'{{if profileImg}}src="'+spro.getWebAppPath("po")+'${profileImg}"'+
				'{{else}}src="/images/placeholders/avatars/avatar_26x26.png" {{/if}}'+
			'alt="" onerror="this.src=/images/placeholders/avatars/avatar_26x26.png">' +
		'</span>' +
		'<a href="#${targetUserId}" title="${targetUserName} ${targetUserJobTitleName}(${targetTenantName})">' +
			'${targetUserName} ${targetUserJobTitleName}(${targetTenantName})' +
		'</a>' +
		'{{if viewDate}}<small class="check">${viewDateStr}</small>{{/if}}' +
		'</span>',
	tmplParticipantInviteUser = '<span class="user1 sender">' +
			'<span class="per26" style="padding:1px;">' +
			'<img class="img-circle" '+ 
				'{{if profileImg}}src="'+spro.getWebAppPath("po")+'${profileImg}"'+
				'{{else}}src="/images/placeholders/avatars/avatar_26x26.png" {{/if}}'+
			'alt="" onerror="this.src=/images/placeholders/avatars/avatar_26x26.png">' +
		'</span>' +
		'<a href="#${targetUserId}" title="${targetUserName}(${targetUserMobile})">' +
			'${targetUserName}(${targetUserMobile})' +
		'</a>' +
		'{{if viewDate}}<small class="check">${viewDateStr}</small>{{/if}}' +
		'</span>',
//var tmplParticipantUser = '<span class="user">' +
//	'<a href="#${targetUserId}" title="${targetUserName} ${targetUserJobTitleName} ${targetUserTeamName}">' +
//		'${targetUserName} ${targetUserJobTitleName}' +
//	'</a>' +
//	'</span>',
//	tmplParticipantOtherTenantUser = '<span class="user">${targetUserName} ${targetUserJobTitleName}(${targetTenantName})</span>',
//	tmplParticipantInviteUser = '<span class="user">${targetUserName}(${targetUserMobile})</span>',
	tmplFacility = '<a href="#${facilityId}" title="${description}">${facilityName}</a>';

(function( $ ){
	var dreg =/^(\d{4})[-|:|.]*(\d{2})[-|:|.]*(\d{2})(\d{2})(\d{2})$/;

	$.extend({
		getUrlVars: function(){
			var vars = {}, hash;
			var strPos = {start:location.href.indexOf('?'), end:location.href.indexOf("#")};
			if(strPos.start >= 0) {
				var hashes = window.location.href.substring(strPos.start+1, strPos.end == -1 ? location.href.length : strPos.end).split('&');
				for(var i = 0; i < hashes.length; i++) {
					hash = hashes[i].split('=');
					vars[hash[0]] = decodeURIComponent(hash[1]);
				}
			}
			return vars;
		},
		getUrlVar: function(name){
			return $.getUrlVars()[name];
		},
		toDate: function(ds) {
			var d = ds;
			if(ds.length < 11) {
				d = ds + "0000";
			}
			var ar = dreg.exec(d);
			return new Date(ar[1],Number(ar[2]) - 1,ar[3],ar[4],ar[5]);
		}
	});
	
	fnScheduleCategoryList = function() {
		var arrResult = [];
		
		var cssFileName = "calendar.css";
		var classBaseName = "icon_schedule_category";
		var className = "category";
		
		$(document.styleSheets).each(function() {
			if(this.href && this.href.indexOf(cssFileName) > -1) {
				var dotClassBaseName = "." + classBaseName;
				var dotClassName = "." + className;
				$.each(this.cssRules || this.rules, function() {	//cssRules - IE9 이상, rules - IE8
					if(this.selectorText.indexOf(dotClassBaseName) > -1) {
						var cssClassName = this.selectorText.replace(dotClassBaseName, "");
						if(cssClassName.indexOf(dotClassName) > -1) {
							var index = cssClassName.replace(dotClassName, "");
							arrResult.push(className + index);
						}
					}
				});
			}
		});
		
		return arrResult;
	};
	
	fnGetAlarmLabel = function(alarm) {
		var msg = sproLang.planner.labelText;
		var time = "";
		switch(true) {
			case alarm.alarmTime < 60 :
				time = msg.beforeMin.replace("%d", alarm.alarmTime);
				break;
			case alarm.alarmTime < 1440 :
				time = msg.beforeHour.replace("%d", Math.ceil(alarm.alarmTime/60));
				break;
			default :
				time = msg.beforeDay.replace("%d", Math.ceil(alarm.alarmTime/1440));
		}
		return '<div class="schedule_bg">' +
				'<span>' + time + '</span>' +
				'<span class="ml20">' + msg.alarmTypes[alarm.alarmType] + '</span>' +
			'</div>';
	};
	
	fnGetScheduleRegInfo = function(schedule, userId, isDefaultLocale) {
		function getDate(date) {
			var month = date.getMonth() + 1,
				day = date.getDate(),
				hour = date.getHours(),
				min = date.getMinutes();
			
			return date.getFullYear() +
				"." + (month < 10 ? "0" : "") + month +
				"." + (day < 10 ? "0" : "") + day +
				" " + (hour < 10 ? "0" : "") + hour +
				":" + (min < 10 ? "0" : "") + min;
		}

		var regInfo = sproLang.planner.labelText.register + " : " +
			"<a onclick=\"spro.goProfilePopupMain('" + schedule.registerId + "')\">" + (isDefaultLocale ? schedule.userInfo : schedule.userEnglishInfo) + "</a>" +
			(schedule.trusteeId ? ("(<a onclick=\"spro.goProfilePopupMain('" + schedule.trusteeId + "')\">" +schedule.trusteeName + " " + schedule.trusteeJobTitleName+ "</a>)") : "") +
			"&nbsp;" + getDate(spro.toDate(schedule.registDate));
		
		if(schedule.registDate != schedule.updateDate) {
			regInfo += "&nbsp; &nbsp; " + sproLang.planner.labelText.updater + " : " +
				"<a onclick=\"spro.goProfilePopupMain('" + schedule.updaterId + "')\">" + schedule.updaterName + " " + schedule.updaterJobTitleName + "</a>" +
				"&nbsp;" + getDate(spro.toDate(schedule.updateDate));
		}
		
		return regInfo;
	};
	
	optimizeScheduleData = function(schedule) {
		schedule.startDate = schedule.startDate.toDate();
		schedule.endDate = schedule.endDate.toDate();
		if(schedule.recurrences && schedule.recurrences.length > 0) {
			$.each(schedule.recurrences, function(n, recurrence) {
				recurrence.startDate = recurrence.startDate.toDate();
				recurrence.endDate = recurrence.endDate.toDate();
				recurrence.sdStartDate = recurrence.sdStartDate.toDate();
				recurrence.sdEndDate = recurrence.sdEndDate.toDate();
			});
		}
		
		if(schedule.fileLinkList && schedule.fileLinkList.length > 0) {
			schedule.fileLinkList = $.map(schedule.fileLinkList, function(file, n) {
				return {fileId:file.fileId, flag:file.flag};
			});
		}
	};
	
	fnRevistionTime = function(momentDate) {	// moment
		var date = momentDate.toDate(),
			revistionDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60000));
		
		return $.fullCalendar.moment(revistionDate.getTime());
	};
	
	// 알림 설정이 중복인지 체크 
	checkAlarmList = function(alarmList) {
		var isDuple = true;
		$.each(alarmList, function(idx) {
			var type = this.alarmType, time = this.alarmTime;
			
			for(var i=idx+1;i<alarmList.length;i++) {
				if(alarmList[i].alarmType == type && alarmList[i].alarmTime == time) {
					isDuple = false;
					alert(speoLang.planner.messageText.alarmDuple);
					return false;
				}
			}
		});
		
		return isDuple;
	};
	
	// 등록하려는 일정 시간에 선택한 설비를 사용할 수 있는지 여부 체크
	checkFacilityRestrict = function(schedule) {
		if(schedule.facilityList && schedule.facilityList.length > 0) {
			var message = sproLang.facility.checkMessage;
			for(var i=0; i<schedule.facilityList.length; i++) {
				var facilityInfo = schedule.facilityList[i];

				var startDate = schedule.startDate.clone().toDate();
				var endDate = schedule.endDate.clone().toDate();
				var reserveHours = (endDate.getTime() - startDate.getTime()) / (60*60*1000);
				
				if(schedule.wholeday == 1){
					reserveHours = 25;
				}
				
				if(facilityInfo.usage == 0 || facilityInfo.restrictionUse == 1) {	// 사용 제한 체크
					alert(message.usage.replace("\#{facilityName}", facilityInfo.facilityName));
					return false;
				}
				
				if(schedule.repeat > 0 && facilityInfo.allowRepeat == 0) {	// 반복일정인데 해당설비가 반복을 허용하지 않으면... 
					alert(message.allowRepeat.replace("\#{facilityName}", facilityInfo.facilityName));
					return false;
				}
				
				if(facilityInfo.maxReservation > 0) {// 예약 가능한 시점인지 확인 : maxReservation
					var date = spro.getCurTime();
					date.setMonth(date.getMonth() + Number(facilityInfo.maxReservation));
					var scheduleEndTime = schedule.repeat > 0 ? schedule.recurrences[0].endDate.toDate().getTime() : endDate.getTime();	// 반복일정이면 반복의 마지막일로 체크
					if(scheduleEndTime > date.getTime()) {
						alert(message.maxReservation.replace("\#{facilityName}", facilityInfo.facilityName).replace("\#{maxReservation}", facilityInfo.maxReservation));
						return false;
					}
				}
				
				if(facilityInfo.maxPerReservation > 0) {// 사용 가능한 시간인지 확인 : maxPerReservation
					if(reserveHours > facilityInfo.maxPerReservation) {
						alert(message.maxPerReservation.replace("\#{facilityName}", facilityInfo.facilityName).replace("\#{maxPerReservation}", facilityInfo.maxPerReservation));
						return false;
					}
				}
				
				if(facilityInfo.limitAvaliableTime == 0) {// 사용 가능한 시각인지 학인 : limitAvaliableTime, avaliableStartTime, avaliableEndTime
					if(reserveHours > 24 || startDate.getDate() != endDate.getDate()
						|| !(startDate.getHours() >= facilityInfo.avaliableStartTime
								&& (endDate.getHours() < facilityInfo.avaliableEndTime || (endDate.getHours() == facilityInfo.avaliableEndTime && endDate.getMinutes() == 0) )
							)
					) {
						alert(message.avaliableTime.replace("\#{facilityName}", facilityInfo.facilityName).replace("\#{avaliableStartTime}", facilityInfo.avaliableStartTime).replace("\#{avaliableEndTime}", facilityInfo.avaliableEndTime));
						return false;
					}
				}
			}
			
		}

		return true;
	};
	
	scheduleRepeatString = function(item) {
		var patternDate = 'yyyy.MM.dd';
		
		var s = '';
		s += '<span>' + sproLang.planner.labelText.every + '</span>&nbsp;';
		s += '<span>' + item.repeatPeriod + '</span>&nbsp;';
		s += '<span>' + sproLang.planner.labelText.repeatTypes[item.repeatType - 1] + sproLang.planner.labelText.unit + '</span>&nbsp;';
		
		roption = item.repeatPeriodOption ? item.repeatPeriodOption.split(',') : [];

		switch(Number(item.repeatType)) {
			case 1 : break;	// 매일
			case 2 :	// 매주
				for(i=0, len=roption.length; i<len; i++) {
					s += sproLang.datepicker.lblDayNames[roption[i]-1] + sproLang.planner.labelText.dow + '&nbsp;';
					s += i+1 == len ? '' : ',';
				}
				break;
			case 3 :	// 매월
				switch(roption[0]) {
					case "a" :
						s += roption[1] + sproLang.planner.labelText.date_1 + '&nbsp;';
						break;
					case "b" :
						s += roption[1] + sproLang.planner.labelText.nth + sproLang.datepicker.lblDayNames[roption[2]-1] + sproLang.planner.labelText.dow + '&nbsp;';
						break;
					case "c" :
						s += sproLang.planner.labelText.last + sproLang.datepicker.lblDayNames[roption[1]-1] + sproLang.planner.labelText.dow + '&nbsp;';
						break;
					case "d" :
						s += sproLang.planner.labelText.lastDate;
						break;
				}
				break;
			case 4 :	// 매년
				switch(roption[0]) {
					case "a" :
						s += s += roption[2] + sproLang.planner.labelText.month + '&nbsp;' + roption[1] + sproLang.planner.labelText.date_1 + '&nbsp;';
						break;
					case "b" :
						s += s += roption[3] + sproLang.planner.labelText.month + '&nbsp;' + roption[1] + sproLang.planner.labelText.nth + sproLang.datepicker.lblDayNames[roption[2]-1] + sproLang.planner.labelText.dow + '&nbsp;';
						break;
					case "c" :
						s += s += roption[2] + sproLang.planner.labelText.month + '&nbsp;' + sproLang.planner.labelText.last + sproLang.datepicker.lblDayNames[roption[1]-1] + sproLang.planner.labelText.dow + '&nbsp;';
						break;
					case "d" :
						s += s += roption[1] + sproLang.planner.labelText.month + '&nbsp;' + sproLang.planner.labelText.lastDate;
						break;
				}
				break;
		}
		
		if(item.startDate)
			s += '<span>' + $.fullCalendar.formatDate(spro.toDate(item.startDate), patternDate) + '</span>&nbsp;' + sproLang.planner.labelText.from + '&nbsp;';
		
		s += '<span>' + $.fullCalendar.formatDate(spro.toDate(item.endDate), patternDate) + '</span>&nbsp;' + sproLang.planner.labelText.untilRepeat;
		return s;
	};
	
	fnCheckMailAddress = function(mail) {
		return (/(\w+\.)*\w+@(\w+\.)+[A-Za-z]+/).test(mail);
	};
	
	//즐겨 찾기 추가 여부 
	setProfileFavorite = function (data) {
		var str = "";
		$("#favoriteBtnView").remove();
		if(data.status == 'exists'){
			str="<span id=\"favoriteBtnView\" style=\"position:relative;z-index:99;\"> <a class=\"ic_fc_favorite select\" onclick=\"deleteFavorite();\" href=\"#a\"><span></span></a></span>";
		}else if(data.status == 'success'){
			str="<span id=\"favoriteBtnView\" style=\"position:relative;z-index:99;\"> <a class=\"ic_fc_favorite\" onclick=\"addUserFavorite();\" href=\"#a\"><span></span></a></span>";
		}
		$(".fc-user-title").append(str);
	};

	// 즐겨 찾기 추가 여부 
	displyFavorite = function (data) {
		if(data.status == 'success'){
		    alert(data.message);
			spro.chkFavorite(gTargetInfo.targetId, setProfileFavorite);
		}
		
		//getFavorite();
	};

	addUserFavorite = function (){
	    spro.addFavorite('PEOPLE','PF',gTargetInfo.targetId,gTargetInfo.targetName,displyFavorite);   
	};

	deleteFavorite = function (){
	    spro.delFavorite('',gTargetInfo.targetId, displyFavorite);
	};
	
	dateToMoment = function (schedule) {
		if(schedule.startDate)
			schedule.startDate = moment(new Date(schedule.startDate));
		if(schedule.endDate)
			schedule.endDate = moment(new Date(schedule.endDate));
		
		if(schedule.recurrences && schedule.recurrences.length > 0) {
			schedule.recurrences = $.map(schedule.recurrences, function(recurrence, i) {
				recurrence.startDate = moment(new Date(recurrence.startDate));
				recurrence.endDate = moment(new Date(recurrence.endDate));
				recurrence.sdStartDate = moment(new Date(recurrence.sdStartDate));
				recurrence.sdEndDate = moment(new Date(recurrence.sdEndDate));
				return recurrence;
			});
		}
		
		return schedule;
	};
	
	// 일정 modal view
	viewSchedule = function(scheduleId, callback) {
		spro.showModal(spro.getContextRoot() + "/groupware/planner/popupQuickView.do?scheduleId=" + scheduleId, callback);
	};
	
	// My Schedule 로 이동
	goPlanner= function(userId){
		var url = spro.getContextRoot() + "/groupware/planner/calendar.do";
		if(userId) url += "?userId=" + userId;
		location.href = url;
	};
	
	// 일정 상세조회로 이동
	goSchedule= function(scheduleId, isUpdate, userId){
		var url = spro.getContextRoot() + "/groupware/planner/calendar.do";
		url += "?scheduleId=" + scheduleId + (isUpdate ? "&mode=update" : "");
		if(userId) url += "&userId=" + userId;
		location.href = url;
	};
	
	// 일정 삭제
	deleteSchedule = function(scheduleId, callback) {
		$("body").loading();
		$.post(spro.getContextRoot() + "/groupware/planner/deleteSchedule.do", {scheduleId:scheduleId})
			.done(function(res) {		
				callback && callback();
			})
			.fail(function(xhr) {
				alert(xhr.responseJSON.errMsg);
			})
			.always(function() { $("body").loaded(); });
	};
	
	// 참석 여부 표시 및 action UI
	fnAttendParticipant = function($user, accept, isUser, scheduleId, userId) {
		switch(accept) {
			case 1 :	//참석
				$user.prepend('<span class="attend">[' + sproLang.planner.labelText.attendance + ']</span>');
				break;
			case 2 :	//불참
				$user.prepend('<span class="absent">[' + sproLang.planner.labelText.noattendance + ']</span>');
				break;
			default :
				$user.prepend('<span class="undone">[' + sproLang.planner.labelText.unknown + ']</span>');
		}
		
		if(isUser) {
			switch(accept) {
				case 1 :	//참석
					$user.append('<a class="absent" href="#">' + sproLang.planner.labelText.noattendance + '</a>');
					break;
				case 2 :	//불참
					$user.append('<a class="attend" href="#">' + sproLang.planner.labelText.attendance + '</a>');
					break;
				default :
					$user.append('<a class="attend" href="#">' + sproLang.planner.labelText.attendance + '</a><a class="absent" href="#">' + sproLang.planner.labelText.noattendance + '</a>');
			}
			
			$user.delegate("a.attend", "click", function(e) {	// 참여 버튼
				var $container = $(this).parent();
				$container.loading();
				$.post(spro.getContextRoot() + "/groupware/planner/updateAcceptInfo.do", {
					scheduleId : scheduleId,
					targetUserId : userId,
					isAccept : 1
				}).done(function() {
					$("span.undone, span.attend, span.absent, a.attend, a.absent", $container).remove();
					$container.prepend('<span class="attend">[' + sproLang.planner.labelText.attendance + ']</span>')
						.append('<a class="absent" href="#">' + sproLang.planner.labelText.noattendance + '</a>');
				}).fail(function(xhr) { alert(xhr.responseJSON.errMsg); })
				.always(function() { $container.loaded(); });
			}).delegate("a.absent", "click", function() {	// 불참버튼
				var $container = $(this).parent();
				
				var $otherModal = $("body").children("div.modal-backdrop");
				$modal = $('<div class="modal fade">' +
						'<div class="modal-dialog w300">' +
							'<div class="modal-content">' +
								'<div class="modal-header">' +
									'<h2 class="modal-title">' + sproLang.planner.titleText.noattendanceTitle + '</h2>' +
								'</div>' +
								'<div class="pd">' + 
									'<div class="modal-body" style="min-height:auto;">' +
										'<input type="text" value="" class="w100p" placeholder="' + sproLang.planner.labelText.noattendanceReason + '" title="' + sproLang.planner.labelText.noattendanceReason + '"/>' +
									'</div>' +
									'<div class="modal-footer">' +
										'<div class="right">' +
											'<button class="btn btn-color5 br btnApply" type="button">' + sproLang.planner.btnText.ok + '</button> ' +
											'<button class="btn btn-color7 br btnClose" type="button">' + sproLang.planner.btnText.close + '</button>' +
										'</div>' +
									'</div>' +
								'</div>' +
							'</div>' +
						'</div>' +
					'</div>').appendTo(document.body)
					.modal({backdrop:"static"})
					.on("hidden.bs.modal", function() { $(this).remove(); });
				
				$("button.btnClose", $modal).click(function() { $modal.modal("hide"); });
				$("button.btnApply", $modal).click(function() {
					var $input = $("input[type=text]", $modal),
						abscentReason = $input.val();
					if(!abscentReason) {
						if(!confirm(sproLang.planner.messageText.confirmNoattendanceEmptyReason)) {
							return false;
						}
					}
					
					$container.loading();
					$.post(spro.getContextRoot() + "/groupware/planner/updateAcceptInfo.do", {
						scheduleId : scheduleId,
						targetUserId : userId,
						isAccept : 2,
						abscentReason : abscentReason
					}).done(function() {
						$("span.undone, span.attend, span.absent, a.attend, a.absent", $container).remove();
						$('<span class="absent" title="' + (abscentReason||sproLang.planner.labelText.noReason) + '">[' + sproLang.planner.labelText.noattendance + ']</span>').prependTo($container).tooltip();
						$container.append('<a class="attend" href="#">' + sproLang.planner.labelText.attendance + '</a>');
						$modal.modal("hide");
					}).fail(function(xhr) { alert(xhr.responseJSON.errMsg); })
					.always(function() { $container.loaded(); });
				});
				
				if($otherModal.is("*")) {// 이미 만들어진 모달이 있는 경우...
					var $lastModal = $otherModal.last().prev(),
						zIndex = $lastModal.css("z-index");
					$modal.css("z-index", zIndex+1)
						.next("div.modal-backdrop").css("z-index", zIndex);
				}
			});
		}
	};
	
	getParticipantUI = function (userTenentId, participant) {
		var template = tmplParticipantUser;
		
		if(participant.targetTenantId) {
			if(userTenentId != participant.targetTenantId)
				template = tmplParticipantOtherTenantUser;
		} else if(participant.vId) {
			template = tmplParticipantOtherTenantUser;
		} else {
			template = tmplParticipantInviteUser;
		}
		
		if(participant.viewDate){
			participant.viewDateStr = (function(date){
				function addZero(val){return val > 9 ? val : '0'+val}
				return date.getFullYear()+'.'+addZero(date.getMonth()+1)+'.'+addZero(date.getDate())
					+ ' ' + addZero(date.getHours()) + ':' +addZero(date.getMinutes());
			})(new Date(participant.viewDate))//2017.07.19 19:12
		} 
			
		return $.tmpl(template, participant);
	};
	
	cleanXSS = function (content) {		
		var value = content;
		
		value = value.replaceAll("<", "&lt;").replaceAll(">", "&gt;");
		value = value.replaceAll("\\(", "&#40;").replaceAll("\\)", "&#41;");
		value = value.replaceAll("'", "&#39;");
		value = value.replaceAll("eval\\((.*)\\)", "");
		value = value.replaceAll("[\\\"\\\'][\\s]*javascript:(.*)[\\\"\\\']", "\"\"");
		value = value.replaceAll("script", "");
		
		return value;
		
	};
	
	googleCalendarSync = function(callback) {
		$("body").loading();
		$.get("/groupware/planner/google/sync.do")
			.done(function() {
				if(typeof(callback) == "function") {
					callback();
				} else {
					if(confirm("동기화 하였습니다.\n\n화면을 새로고침하시겠습니까?")) {
						location.href = "/groupware/planner/calendar.do";
					}
				}
			}).fail(function(xhr) {
				var json = $.parseJSON(xhr.responseText);
				alert(json.errMsg||"시스템 장애가 발생하였습니다.\n\n다시 시도해주세요.");
				location.reload();
			}).always(function() {
				$("body").loaded();
			});
	};
	
	datePickerShow = function(callback){
		$calendar = $("#calendar");
		var calendarView = $calendar.fullCalendar("getView");
		var changeDate = $calendar.fullCalendar("getDate");
		if(calendarView.name == "month") {	
			setDatepickerVal = moment(changeDate).format('YYYY.MM'); 
		}else if(calendarView.name == "agendaWeek" || calendarView.name == "agendaDay"){
			setDatepickerVal = moment(changeDate).format('YYYY.MM.DD'); 
		}
	};
})( jQuery );