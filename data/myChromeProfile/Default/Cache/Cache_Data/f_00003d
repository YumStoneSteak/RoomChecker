(function($){
	

// validator extend ---------------------------------------------------------------------------
$.validator.setDefaults({
	errorClass : "valid-error",
	//focusCleanup: true,
	//onkeyup:false,
	//onfocusout: function(element) { $(element).val($.trim($(element).val())).valid(); },
	//focusInvalid:false,
	onfocusout: function(element) {
		var val = $.trim($(element).val());
		if(val == "") $(element).val(val).valid();
		else $(element).valid();
	},
	errorPlacement : function(error, element) {
		var $container = element.parent();
		if($container[0].tagName.toLowerCase() == "label") $container = $container.parent();
		
		$container.css("position", "relative");
		//error.appendTo($container);
		error.insertAfter(element);
		var direction = spro.Validator.getArrowClassNameToDirection(error.children("div").attr("class"));
		var position = spro.Validator.getDrawPosition(element, error, direction);
		error.css({left:position.left, top:position.top});
		
		$container.children("label.notice").hide();
		//$container.children("label.serverError").remove(arrowClassName);
	}/*,
	invalidHandler : function(form, validator) {
		spro.debug("invalidHandler");
		spro.debug(arguments);
	},
	showErrors : function(errorMap, errorList) {	// 공통 영역에서 메세징 처리 할때 사용
		spro.debug("showErrors");
		spro.debug(arguments);
		
		$.each(errorList, function() {	// element, message
		});

		//this.defaultShowErrors();
	}*/,
	submitHandler : function(form) {
		//spro.debug("default submit handler");
		//spro.Validator.XSS(form);
		form.submit();
	}
});

$.validator.addMethod("nospace", function(value, element, params){
	return !value.match(/\s/g);
}, "invalid message");

$.validator.addMethod("minlength", function(value, element, params){
	return $.trim(value) == "" ? false : (!value || value.length > params);
}, "invalid message");

$.validator.addMethod("minlengthOrg", function(value, element, params){
	return (!value || value.length >= params);
}, "invalid message");

$.validator.addMethod("maxlength", function(value, element, params){
	return !value || value.length <= params;
}, "invalid message");

$.validator.addMethod("rangelength", function(value, element, params){
	return !value || (value.length >= params[0] && value.length <= params[1]);
}, "invalid message");

//			$.validator.addMethod("email", function(value, element, params){	// 이메일 주소 체크 : 한글 배제
//				return !value || (!(/[가-힣]/).test(value) && (/(\w+\.)*\w+@(\w+\.)+[A-Za-z]+/).test(value));
//			}, "invalid message");

$.validator.addMethod("pattern", function(value, element, params){	// 정규식에 적합하면 허용
	return (params).test(value);	// false - invalid
}, "invalid message");

$.validator.addMethod("englishName", function(value, element){
	// this : validator, this.optional(element) : false
	// value, element
	//return !(/[^A-Za-z\s]+/).test(value);	// false - invalid
	return true;
}, "invalid message");

$.validator.addMethod("terminology", function(value, element){
	return !(/[^A-Za-z0-9\s]+/).test(value);	// false - invalid
}, "invalid message");

$.validator.addMethod("alpaNum", function(value, element){
	return !(/[^A-Za-z0-9]+/).test(value);	// false - invalid
}, "invalid message");

$.validator.addMethod("alpaHanNum", function(value, element){
	return !(/[`~!@+_#$%^&*|\\\'\";:\/?\{\[\<\}\]\>]+/).test(value);	// false - invalid
}, "invalid message");

$.validator.addMethod("minlengthNullable", function(value, element, params){
	return $.trim(value) == "" ? true : (!value || value.length > params);
}, "invalid message");

$.validator.addMethod("phone", function(value, element){
	return !value || (/^\d{2}\d?-\d?\d{3}-\d{4}$/).test(value); 
}, "invalid message");

$.validator.addMethod("zipcode", function(value, element){
	return !value || (/^\d{3}-\d{3}$/).test(value);
}, "invalid message");

$.validator.addMethod("personNumber", function(value, element){
	var strJumin = value.replace("-", "");
	var checkBit = new Array(2,3,4,5,6,7,8,9,2,3,4,5);
	var num7  = strJumin.charAt(6);
	var num13 = strJumin.charAt(12);
	var total = 0;
	if (strJumin.length == 13 ) {
		for (i=0; i<checkBit.length; i++) { // 주민번호 12자리를 키값을 곱하여 합산한다.
			total += strJumin.charAt(i)*checkBit[i];
		}
		// 외국인 구분 체크
		if (num7 == 0 || num7 == 9) { // 내국인 ( 1800년대 9: 남자, 0:여자)
			total = (11-(total%11)) % 10;
		} else if (num7 > 4) {  // 외국인 ( 1900년대 5:남자 6:여자  2000년대 7:남자, 8:여자)
			total = (13-(total%11)) % 10;
		} else { // 내국인 ( 1900년대 1:남자 2:여자  2000년대 3:남자, 4:여자)
			total = (11-(total%11)) % 10;
		}
		if(total != num13) {
			return false;
		}
		return true;
	}
	return false;
}, "invalid message");

$.validator.addMethod("businessNum", function(value, element){
	//사업자번호 는 숫자만 10자리로 
	if (!value) return true; //필수값 아니므로 없으면 통과
	var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);
	var tmpBizID, i, chkSum=0, c2, remander;
	var re = /-/g;
	value = value.replace(re,'');
	if (value.length != 10) return false;
	
	for (i=0; i<=7; i++) chkSum += checkID[i] * value.charAt(i);
	c2 = "0" + (checkID[8] * value.charAt(8));
	c2 = c2.substring(c2.length - 2, c2.length);
	chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));
	remander = (10 - (chkSum % 10)) % 10 ;
	
	if (Math.floor(value.charAt(9)) == remander) return true ; // OK!
	return false;
}, "invalid message");

$.validator.addMethod("corporateNum", function(value, element){
	//법인번호 는 숫자만 13자리로 
	if (!value) return true; //필수값 아니므로 없으면 통과
	var re = /-/g;
	value = value.replace(re,'');
	if (value.length != 13) return false;
	
	var arr_regno  = value.split("");
	var arr_wt   = new Array(1,2,1,2,1,2,1,2,1,2,1,2);
	var iSum_regno  = 0;
	var iCheck_digit = 0;
	for (i = 0; i < 12; i++) iSum_regno +=  eval(arr_regno[i]) * eval(arr_wt[i]);
	iCheck_digit = 10 - (iSum_regno % 10);
	iCheck_digit = iCheck_digit % 10;
	
	if (iCheck_digit != arr_regno[12]) return false;
	return true;
}, "invalid message");

$.validator.addMethod("date", function(value, element){	// default date type customize
	var result = !value || (/^\d{4}\.\d{2}\.\d{2}$/).test(value);
	try {	// 날짜 포멧 체크
		var dpg = $.fn.datepicker.DPGlobal;
		var date = dpg.parseDate($(element).val(), dpg.parseFormat(spro.config.dateFormat));
	} catch(e) {
		result =  false;
	}
	return result;
}, "invalid message");

$.validator.addMethod("numberHyphen", function(value, element) {
	return !value || !(/[^\d\-]+/).test(value);
}, "invalid message");
$.validator.addMethod("phoneNumber", function(value, element) {
	return !value || !(/[^\d\-\+]+/).test(value);
}, "invalid message");
$.validator.addMethod("numberComma", function(value, element) {
	return !value || !(/[^\d\,]+/).test(value);
}, "invalid message");
$.validator.addMethod("numberDot", function(value, element) {
	return !value || !(/[^\d\.]+/).test(value);
}, "invalid message");
$.validator.addMethod("numberOnly", function(value, element) {
	return !value || !(/[^\d]+/).test(value);
}, "invalid message");

//(부호 선택, 자릿수구분기호 선택, 소수점 선택)
$.validator.addMethod("numberPrice", function(value, element) {
	return !value || (/^[+\-]?(([1-9][0-9]{0,2}(,[0-9]{3})*)|[0-9]+){1}(\.[0-9]+)?$/g).test(value);
}, "invalid message");

$.validator.addMethod("dateGap", function(value, element, params) {	// params[0]의 날짜와 params[1]만큼의 범위 내의 날짜로 지정했는지 체크
	var $ref, ref = params[0] || null;
	if(typeof(ref) == "string") {
		$ref = (ref.indexOf("#") == 0) ? $(ref) : $("[name=" + ref + "]", this.currentForm);
	} else {
		$ref = $(ref);
	}
	
	if($ref.size() > 0) {
		var dpg = $.fn.datepicker.DPGlobal;
		var date1 = dpg.parseDate($(element).val(), dpg.parseFormat(spro.config.dateFormat));
		var date2 = dpg.parseDate($ref.val(), dpg.parseFormat(spro.config.dateFormat));
		
		if(date1 && date2) {
			var gap = (date1 - date2)/(86400*1000);
			return params[1] > 0 ? gap < params[1] : gap > params[1];
		}
	}
	return true;
}, "invalid message");
$.validator.addMethod("dateLT", function(value, element, param) {	// param의 날짜 보다 작으면 허용
	var $ref = (typeof(param) == "string") ?
					(param.indexOf("#") == 0) ? $(param) : $("[name=" + param + "]", this.currentForm)
						: $(param);

	var dpg = $.fn.datepicker.DPGlobal;
	var date1 = dpg.parseDate($(element).val(), dpg.parseFormat(spro.config.dateFormat));
	var date2 = dpg.parseDate($ref.val(), dpg.parseFormat(spro.config.dateFormat));
	
	if(date1 && date2)  return date1 < date2;
	return true;
}, "invalid message");
$.validator.addMethod("dateLTE", function(value, element, param) {	// param의 날짜 보다 작거나 같으면 허용
	var $ref = (typeof(param) == "string") ?
			(param.indexOf("#") == 0) ? $(param) : $("[name=" + param + "]", this.currentForm)
				: $(param);

	var dpg = $.fn.datepicker.DPGlobal;
	var date1 = dpg.parseDate($(element).val(), dpg.parseFormat(spro.config.dateFormat));
	var date2 = dpg.parseDate($ref.val(), dpg.parseFormat(spro.config.dateFormat));

	if(date1 && date2) return date1 <= date2;
	return true;
}, "invalid message");
$.validator.addMethod("dateGT", function(value, element, param) {	// param의 날짜 보다 크면 허용
	var $ref = (typeof(param) == "string") ?
			(param.indexOf("#") == 0) ? $(param) : $("[name=" + param + "]", this.currentForm)
				: $(param);
	
	var dpg = $.fn.datepicker.DPGlobal;
	var date1 = dpg.parseDate($(element).val(), dpg.parseFormat(spro.config.dateFormat));
	var date2 = dpg.parseDate($ref.val(), dpg.parseFormat(spro.config.dateFormat));
	
	if(date1 && date2)  return date1 > date2;
	return true;
}, "invalid message");
$.validator.addMethod("dateGTE", function(value, element, param) {	// param의 날짜 보다 크거나 같으면 허용
	var $ref = (typeof(param) == "string") ?
			(param.indexOf("#") == 0) ? $(param) : $("[name=" + param + "]", this.currentForm)
				: $(param);

	var dpg = $.fn.datepicker.DPGlobal;
	var date1 = dpg.parseDate($(element).val(), dpg.parseFormat(spro.config.dateFormat));
	var date2 = dpg.parseDate($ref.val(), dpg.parseFormat(spro.config.dateFormat));

	if(date1 && date2) return date1 >= date2;
	return true;
}, "invalid message");
$.validator.addMethod("tagWord", function(value, element, params) {
	return true; //!value || !(/[^\w가-힣,\s*]/).test(value);	// 알파벳/숫자, 한글, 콤마, 공백
}, "invalid message");
$.validator.addMethod("tagCount", function(value, element, params) {
	var tags = value;
	var tagArray = tags.split(",");
	
	var tmpTagList = new Array();
	var j = 0;
	for(var i=0; i < tagArray.length; i++){
		
		if(tagArray[i].length > -1){
			tmpTagList[j++] = tagArray[i];
		}
	}
	
	return params >= tmpTagList.length && tmpTagList.length > 0;
	
}, "invalid message");
$.validator.addMethod("tagDuplicate", function(value, element, params) {
	var tagArray = value.split(",");

	var duplTag = "";
	$.each(tagArray, function(idx) {
		if(tagArray.indexOf(this.toString(), idx+1) > -1) {
			duplTag = this.toString();
			return false;
		}
	});

	if(duplTag) {
		params[0] = duplTag;
		return false;
	}
	
	return true;
}, "invalid message");
$.validator.addMethod("minlengthByte", function(value, element, params) {
	return value.byteLength() >= params;
}, "invalid message");
$.validator.addMethod("maxlengthByte", function(value, element, params) {
	return value.byteLength() <= params;
}, "invalid message");
$.validator.addMethod("rangelengthByte", function(value, element, params) {
	var len = value.byteLength();
	return (len >= params[0] && len <= params[1]);
}, "invalid message");
$.validator.addMethod("minSize", function(value, element, params) {
	return element.length >= params;
}, "invalid message");
$.validator.addMethod("noTag", function(value, element) {
	return !value || !(/<(\S+).*>(.*)<\/\1>|<.*\/>/).test(value);
}, "invalid message");
$.validator.addMethod("category", function(value, element) {
	return !value || !(/['"<>]/g).test(value);
}, "invalid message");
$.validator.addMethod("search", function(value, element, params) {
	return !value.match(/\%/g);
}, "invalid message");
// duplicate check
$.validator.addMethod("chkDuplicate", function(value, element){ return false; }, "invalid message");
$.validator.addMethod("duplicate", function(value, element){ return false; }, "invalid message");
$.validator.addMethod("endTimeGT", function(value, element) {	// 일정관리 전용 -- 화면 구성이 ajax이며 view. write에서 모두 import하고 있음.
	var $form = $(element).parents("form:first");
	var startDate = $("input[name=startDate]", $form).datepicker("getDate"),
		endDate = $("input[name=endDate]", $form).datepicker("getDate");
	
	var time = $("input[name=startTime]", $form).val().split(":");
	var startTime = moment(startDate).hour(Number(time[0])).minute(Number(time[1]));
	
	time = $("input[name=endTime]", $form).val().split(":");
	var endTime = moment(endDate).hour(Number(time[0])).minute(Number(time[1]));
	
	return startTime.toDate() < endTime.toDate();
}, "");


$.extend(spro, {
	Validator : function(form, options) {
		var self = this;
		var validator = null;
		var noticeStyle = "valid-notice";
		var tplMsgContainer = $.template(null, '<label class="${messageClass}">${msg}<div class="${arrowClass}"></div></label>');	// notice message box
		
		var validDelay = 10;
		
		var validOption = {};
		var notice = null;

		function getValidMessage($inputElement) {
			var $container = $inputElement.parent();
			if($container[0].tagName.toLowerCase() == "label") $container = $container.parent();
			
			return $container.children("label.valid-error:visible");
		}
		
		function hideNotice($inputElement) {
			var $container = $inputElement.parent();
			if($container[0].tagName.toLowerCase() == "label") $container = $container.parent();
			$container.children("label."+noticeStyle).hide();
		}
		
		function showNotice($inputElement) {
			var $container = $inputElement.parent();
			if($container[0].tagName.toLowerCase() == "label") $container = $container.parent();
			
			//$container.children("label.serverError").remove();

			var $msgBox =  $container.children("label."+noticeStyle).filter(".elName_" + $inputElement.attr("name"));
			if($msgBox.length > 0) {
				var direction = spro.Validator.getArrowClassNameToDirection($msgBox.children("div").attr("class"));
				var position = spro.Validator.getDrawPosition($inputElement, $msgBox, direction);
				$msgBox.css({left:position.left, top:position.top})
					.show();
			} else {
				var noticeItem = notice[$inputElement.attr("name")];
				var noticeInfo = {msg:noticeItem, direction:"top"}; // 메세지 정보 셋팅
				if(typeof(noticeItem) == "object") {
					noticeInfo.msg = noticeItem["message"] || "";
					noticeInfo.direction = noticeItem["direction"] || "top";
				 }
				
				$container.css("position", "relative");
				$msgBox = $.tmpl(tplMsgContainer, {
					messageClass:noticeStyle + " elName_" + $inputElement.attr("name"),
					arrowClass:spro.Validator.getArrowClassName(noticeInfo.direction),
					msg:noticeInfo.msg
				}).appendTo($container)
					.show();
				var position = spro.Validator.getDrawPosition($inputElement, $msgBox, noticeInfo.direction);
				$msgBox.css({left:position.left, top:position.top});
			}
		}
		
		function generateServerValid() {
			var messages = {};
			$(form).find("label.serverError:not(:empty)").each(function() {
				var $label = $(this);
				if($.trim($label.html())) {
					var validItem = $label.attr("for");
					var message = validOption.messages && validOption.messages[validItem];
					var direction = (message && message["direction"]) || "top";
					messages[validItem] = $label.html() + spro.Validator.getArrowTag(direction);
				}
				$label.remove();
			});

			if(!$.isEmptyObject(messages)) {
				validator.showErrors(messages);
			}
		}
		
		this.getValidator = function() {};
		this.showErrors = function(errorItems) {
			var messages = {};
			$.each(errorItems, function(index, error) {
				var message = validOption.messages && validOption.messages[error.field];
				var direction = (message && message["direction"]) || "top";
				
				messages[error.field] = error.defaultMessage + spro.Validator.getArrowTag(direction);;
			});
			
			if(!$.isEmptyObject(messages)) {
				validator.showErrors(messages);
			}
		};
		
		this.addRule = function(el, option) {
			var arrowTag = spro.Validator.getArrowTag(option.messages["direction"] || "top");
			for(var msg in option.messages) {
				if(typeof(option.messages[msg]) == "string" && msg != "direction") {
					option.messages[msg] += arrowTag;
				}
			}
			
			if(option.notice) {
				notice[$(el).attr("name")] = option.notice;
				option.notice = undefined;
				
				$(el).bind("keyup", function(event) {
					var $el = $(this);
					setTimeout(function(){
						var $errorMessage = getValidMessage($el);
						
						if($errorMessage.length == 0 && !$el.val()) showNotice($el);
						else hideNotice($el);
					}, validDelay);
				}).bind("focusin", function(event) {
					var $el = $(this);
					setTimeout(function(){
						var $errorMessage = getValidMessage($el);
						if($errorMessage.length == 0 && !$el.val()) showNotice($el);
					}, validDelay);
				}).bind("focusout", function(event) {
					var $el = $(this);
					setTimeout(function() { hideNotice($el); }, validDelay);
				});
			}

			$(el).rules("add", option);
		};
		
		this.removeRule = function(el, rules) {
			var $el = $(el);
			var $parent = $el.parent();
			if(rules) {
				$el.rules("remove", rules);
				$el.siblings("label.valid-notice, label.valid-error").hide();
				
				if($parent.get(0).tagName.toLowerCase() == "label")
					$parent.siblings("label.valid-notice, label.valid-error").remove();
			} else {
				$el.rules("remove");
				$el.unbind("keyup focusin focusout")
					.siblings("label.valid-notice, label.valid-error").remove();
				
				if($parent.get(0).tagName.toLowerCase() == "label")
					$parent.siblings("label.valid-notice, label.valid-error").remove();
			}
		};
		
		this.resetForm = function() {
			validator.resetForm();
		};
		
		$.each(options, function(key, value) {
			switch(key) {
				case "invalidServer" : break;
				case "notice" : notice = value; break;
				case "onfocusout" :
					// onfocusout 이 false면 기본 옵션의 onfocusout 설정을 없앰 : focusout될때 벨리데이션 하지 않음.
					if(value === false) validOption[key] = function() {};
					else  validOption[key] = value;
					break;
				default :
					if(key == "messages") {	// 디자인 처리를 위해 문구 내용에 arrow를 추가함.
						var messages = value;
						for(var item in messages) {
							if(typeof(messages[item]) == "object") {
								var strDir = "top";
								var direction = messages[item]["direction"];
								if(direction) {
									if(typeof(direction) == "string") {
										strDir = direction;
									} else {
										strDir = direction.arrow || "top";
										if(direction.offset) $("[name=" + item + "]", form).data("offset", direction.offset);
									}
								}
								
								var arrowTag = spro.Validator.getArrowTag(strDir);
								for(var msg in messages[item]) {
									if(typeof(messages[item][msg]) == "string" && msg != "direction") {
										messages[item][msg] += arrowTag;
									}
								}
							} else {
								messages[item] += spro.Validator.getArrowTag("top");
							}
						}
					}
					validOption[key] = value;
			}
		});
		
		if(notice != null) {
			var elements = [];
			$.each(notice, function(elName) {
				elements.push("[name=" + elName + "]");
			});
			
			$(elements.join(","), form).bind("keyup", function(event) {
				var $el = $(this);
				setTimeout(function(){
					var $errorMessage = getValidMessage($el);
					
					if($errorMessage.length == 0 && !$el.val()) showNotice($el);
					else hideNotice($el);
				}, validDelay);
			}).bind("focusin", function(event) {
				var $el = $(this);
				setTimeout(function(){
					var $errorMessage = getValidMessage($el);
					if($errorMessage.length == 0 && !$el.val()) showNotice($el);
				}, validDelay);
			}).bind("focusout", function(event) {
				var $el = $(this);
				setTimeout(function() { hideNotice($el); }, validDelay);
			});
		}
		
		validator = $(form).validate(validOption);
		//if(options["invalidServer"] == true) $(form).valid();
		generateServerValid();
		
		return this;
	}
});

$.extend(spro.Validator, {	// static method
	getArrowClassNameToDirection : function(className) {
		var result = "top";
		switch(className) {
			case "arrow_t" : result = "top"; break;
			case "arrow_b" : result = "bottom"; break;
			case "arrow_l" : result = "left"; break;
			case "arrow_r" : result = "right"; break;
			case "arrow_tr" : result = "top-right"; break;
			case "arrow_br" : result = "bottom-right"; break;
		}
		return result;
	},
	getArrowClassName : function(direction) {
		var result = "arrow_t";
		switch(direction) {
			//case "top" : result = "arrow_t"; break;
			case "bottom" : result = "arrow_b"; break;
			case "left" : result = "arrow_l"; break;
			case "right" : result = "arrow_r"; break;
			case "top-right" : result = "arrow_tr"; break;
			case "bottom-right" : result = "arrow_br"; break;
		}
		return result;
	},
	getDrawPosition : function($input, $msgBox, direction) {
		var offset = {left:6, top:3};
		var posOffset = $input.data("offset");

		var inputPosition = $input.position();
		var position = {
			left:inputPosition.left + 30 + ((posOffset && posOffset.left) || 0),
			top:inputPosition.top + ((posOffset && posOffset.top) || 0)
		};

		switch(direction) {
			case "top" : position.top = inputPosition.top - $msgBox.outerHeight() - offset.top - 2; break;
			case "bottom" : position.top = inputPosition.top + $input.outerHeight() + offset.top + 2; break;
			case "left" : position.left = inputPosition.left - $msgBox.outerWidth() - offset.left;break;
			case "right" : position.left = inputPosition.left + $input.outerWidth() + offset.left; break;	// layout이 유동적일 때 input의 사이즈가 유동적 이면 사용하지 않도록 한다.
			case "top-right" :	// layout이 유동적일 때 input의 사이즈가 유동적 이면 사용하지 않도록 한다.
				position.top = inputPosition.top - $msgBox.outerHeight() - offset.top - 2;
				position.left = inputPosition.left + $input.outerWidth() - $msgBox.outerWidth();
				break;
			case "bottom-right" :	// layout이 유동적일 때 input의 사이즈가 유동적 이면 사용하지 않도록 한다.
				position.top = inputPosition.top + $input.outerHeight() + offset.top;
				position.left = inputPosition.left + $input.outerWidth() - $msgBox.outerWidth();
				break;
		}
		return position;
	},
	getArrowTag : function (direction) {
		var className = spro.Validator.getArrowClassName(direction);
		return '<a onclick="spro.Validator.hideMessage(this); return false;" class="close"></a><div class="' + className + '"></div>';
	},
	hideMessage : function(el) {
		$(el).parent().hide();
	},
	XSS : function(form) {
		var replaceItems = [
			{source:"<", dest:"&lt;"},
			{source:">", dest:"&gt;"}
		];
		
		$.each($(form).serializeArray(), function() {
			var value = this.value;
			$.each(replaceItems, function() { value = value.replaceAll(this.source, this.dest); });
			$("[name=" + this.name + "]", form).val(value);
		});
	}
});

})(jQuery);